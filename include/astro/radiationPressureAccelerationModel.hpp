/*
 * Copyright (c) 2014-2025 Kartik Kumar (me@kartikkumar.com)
 * Copyright (c) 2014-2016 Marko Jankovic, DFKI GmbH
 * Copyright (c) 2014-2016 Natalia Ortiz, University of Southampton
 * Copyright (c) 2014-2016 Juan Romero, University of Strathclyde
 * Distributed under the MIT License.
 * See accompanying file LICENSE.md or copy at http://opensource.org/licenses/MIT
 */

#pragma once

#include "astro/constants.hpp"

namespace astro
{

//! Compute radiation pressure for complete absorption.
/*!
 * Computes radiation pressure for complete absorption from a given energy flux:
 *
 * \f[
 *      P = \frac{W}{c}
 * \f]
 *
 * where \f$P\f$ is the computed radiation pressure, \f$W\f$ is the energy flux, and \f$c\f$ is the
 * speed of light.
 *
 * @tparam    Real        Floating-point type
 * @param[in] energyFlux  Energy flux generated by source, i.e., Sun  [W m^-2]
 * @return                Computed radiation pressure                 [N m^-2]
 */
template <typename Real>
Real computeAbsorptionRadiationPressure(const Real energyFlux)
{
  return energyFlux / ASTRO_SPEED_OF_LIGHT;
}

//! Compute radiation pressure.
/*!
 * Computes radiation pressure at a specified distance from the source, e.g., the Sun, by scaling
 * with respect to a given reference. Typically, the reference is taken to be the average energy
 * flux at Earth, i.e., approximately 1 AU.
 *
 * Since the flux is inversely proportional to the square of the distance, the radiation presurre
 * at a given distance is computed using the following equation:
 *
 * \f[
 *      P = P_{ref} \frac{R_{ref}^{2}}{R^{2}}
 * \f]
 *
 * where \f$P\f$ is the computed radiation pressure, \f$P_{ref}\f$ is the reference radiation
 * pressure, \f$R_{ref}\f$ is the reference distance, and \f$R\f$ is the specified distance.
 *
 * The distances can be given in any units, so long as they are both in the same units.
 *
 * @tparam    Real                        Floating-point type
 * @param[in] referenceRadiationPressure  Reference radiation pressure          [N m^-2]
 * @param[in] referenceDistance           Reference distance                    [AU]
 * @param[in] distance                    Given distance from the Sun           [AU]
 * @return                                Radiation pressure at given distance  [N m^-2]
 */
template <typename Real>
Real computeRadiationPressure(const Real referenceRadiationPressure,
                              const Real referenceDistance,
                              const Real distance)
{
    return referenceRadiationPressure
        * (referenceDistance * referenceDistance / (distance * distance));
}

//! Compute radiation pressure acceleration for a cannonball.
/*!
 * Compute radiation pressure acceleration for a canonball. The model for the radiation
 * pressure acceleration is given by (Montenbruck, 2000):
 *
 * \f[
 *      a = -C_{R} \frac{3}{4r\rho} P \vec{u}
 * \f]
 *
 * where \f$P\f$ is the radiation pressure for complete absorption at a specified distance from the
 * source, \f$C_{R}\f$ is the radiation pressure coefficient (\f$C_{R} = 1\f$ for complete
 * absorption and \f$C_{R} = 2\f$ for specular reflection), \f$r\f$ is the radius of the
 * cannonball, \f$ \rho \f$ is the bulk density of the cannonball, and \f$ \vec{u} \f$ is the unit
 * vector pointing to the source of the radiation pressure, e.g., the Sun.
 *
 * This function can be used to compute the 1st-order effects of radiation pressure on small
 * particles in the Solar System. The higher-order terms, stemming from Poynting-Robertson drag
 * are neglected.
 *
 * @sa computeCannonballPoyntingRobertsonDragAcceleration
 * @tparam    Real                          Floating-point type
 * @tparam    Vector3                       3-vector type
 * @param[in] radiationPressure             Radiation pressure                        [N m^-2]
 * @param[in] radiationPressureCoefficient  Radiation pressure coefficient            [-]
 * @param[in] unitVectorToSource            Unit vector pointing to radiation source  [-]
 * @param[in] radius                        Radius of cannonball                      [m]
 * @param[in] bulkDensity                   Bulk density of cannonball                [kg m^-3]
 * @return                                  Computed radiation pressure acceleration  [m s^-2]
 */
template <typename Real, typename Vector3>
Vector3 computeCannonballRadiationPressureAcceleration(const Real     radiationPressure,
                                                       const Real     radiationPressureCoefficient,
                                                       const Vector3& unitVectorToSource,
                                                       const Real     radius,
                                                       const Real     bulkDensity)
{
    Vector3 acceleration = unitVectorToSource;

    const Real preMultiplier = -radiationPressure
                               * radiationPressureCoefficient
                               * 0.75 / (radius * bulkDensity);

    acceleration[0] = preMultiplier * unitVectorToSource[0];
    acceleration[1] = preMultiplier * unitVectorToSource[1];
    acceleration[2] = preMultiplier * unitVectorToSource[2];

    return acceleration;
}

//! Compute Poynting-Roberson drag acceleration for a cannonball.
/*!
 * Compute Poynting-Roberson (PR) drag acceleration for a cannonball. The model for PR drag
 * acceleration in an inertial reference frame is given by (Mignard, 1984):
 *
 * \f[
 *      a = C_{R} \frac{3}{4r\rho} P \left[\vec{u} \vec{V}^{T} \vec{u} + \vec{V} \right]
 * \f]
 *
 * where \f$P\f$ is the radiation pressure for complete absorption at a specified distance from the
 * source, \f$C_{R}\f$ is the radiation pressure coefficient (\f$C_{R} = 1\f$ for complete
 * absorption and \f$C_{R} = 2\f$ for specular reflection), \f$r\f$ is the radius of the
 * cannonball, \f$\rho\f$ is the bulk density of the cannonball, \f$ \vec{u} \f$ is the unit vector
 * pointing from the source of the radiation pressure, e.g., the Sun, and \f$ \vec{V} \f$ is the
 * total velocity of the cannonball in an inertial frame centered at the source.
 *
 * This function can be used to compute the higher-order effects of radiation pressure on small
 * particles in the Solar System. The 1st-order effect (zeroth-order in \f$\frac{\vec{V}}{c}\f$) is
 * not included.
 *
 * @sa computeCannonballRadiationPressureAcceleration
 * @tparam    Real                          Floating-point type
 * @tparam    Vector3                       3-vector type
 * @param[in] radiationPressure             Radiation pressure                        [N m^-2]
 * @param[in] radiationPressureCoefficient  Radiation pressure coefficient            [-]
 * @param[in] unitVectorToSource            Unit vector pointing to radiation source  [-]
 * @param[in] radius                        Radius of cannonball                      [m]
 * @param[in] bulkDensity                   Bulk density of cannonball                [kg m^-3]
 * @param[in] velocity                      Total orbital velocity of cannonball wrt
 *                                          inertial centered at radiation source     [m s^-1]
 * @return                                  Computed radiation pressure acceleration  [m s^-2]

 */
template <typename Real, typename Vector3>
Vector3 computeCannonballPoyntingRobertsonDragAcceleration(
    const Real     radiationPressure,
    const Real     radiationPressureCoefficient,
    const Vector3& unitVectorToSource,
    const Real     radius,
    const Real     bulkDensity,
    const Vector3& velocity)
{
    Vector3 acceleration = unitVectorToSource;

    const Real preMultiplier = radiationPressure
                               * radiationPressureCoefficient
                               * 0.75 / (radius * bulkDensity * ASTRO_SPEED_OF_LIGHT);

    acceleration[0]
      = preMultiplier * (unitVectorToSource[0] * unitVectorToSource[0] + 1.0) * velocity[0];
    acceleration[1]
      = preMultiplier * (unitVectorToSource[1] * unitVectorToSource[1] + 1.0) * velocity[1];
    acceleration[2]
      = preMultiplier * (unitVectorToSource[2] * unitVectorToSource[2] + 1.0) * velocity[2];

    return acceleration;
}

} // namespace astro
